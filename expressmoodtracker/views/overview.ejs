<!DOCTYPE html>
<html lang="en" style="background-image: url('/imgs/sea_tile.jpeg');  background-size: tile;">">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snapshot Overview</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/imgs/favicon-32x32.png"> 
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
    <!-- Flatpickr CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<!-- Flatpickr JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <link rel="stylesheet" href="/css/mystyles.css">
</head>
</head>
<body>
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(255, 255, 255, 0.6); z-index: -1; "></div>
    <%- include('navbar') %>
    <section class="section">
          
</section>
<% if (!snapshots) { %>
    <h1>Welcome <%= session.first_name %>! Click Add Snapshot to start logging your emotions!</h1>
<% } %>
<!-- NEW EXPERIMENTAL SECTION-->
<div class="columns is-centered">
    <!-- Container for time buttons -->
    <div class="column">
        <div class="buttons is-flex is-flex-direction-column is-justify-content-flex-end">
            <button id="allButton" class="button mybutton">All Time</button>
            <button id="yearButton" class="button mybutton">Year</button>
            <button id="threeMonthsButton" class="button mybutton">3 Months</button>
            <button id="monthButton" class="button mybutton">Month</button>
            <button id="weekButton" class="button mybutton">Week</button>
            <button id="dayButton" class="button mybutton">Day</button>
        </div>
    </div>
    <!-- Container for the chart -->
    <div class="column is-half is-centered">
        <!-- Canvas element for the chart -->
        <canvas id="myChart"></canvas>
    </div>
    <div class="column">
        <div class="buttons is-flex is-flex-direction-column">
    <button id="showAllButton" class="button mybutton">Show All</button>
        <button id="showEnjoymentButton" class="button enjoyment">Enjoyment</button>
        <button id="showSurpriseButton" class="button surprise">Surprise</button>
        <button id="showContemptButton" class="button contempt">Contempt</button>
        <button id="showFearButton" class="button fear">Fear</button>
        <button id="showSadnessButton" class="button sadness">Sadness</button>
        <button id="showDisgustButton" class="button disgust">Disgust</button>
        <button id="showAngerButton" class="button anger">Anger</button>
    </div>
</div>
</div>
</div>
<!-- END EXPERIMENTAL SECTION-->
   
    <script>     

document.addEventListener('DOMContentLoaded', () => {
    const snapshotCards = document.querySelectorAll('.date-card');
    snapshotCards.forEach((card) => {
        card.addEventListener('mouseover', (event) => {
            const notes = event.currentTarget.dataset.notes; // Get the notes from the data attribute
            if (notes) {
                const tooltip = document.createElement('div');
                tooltip.classList.add('tooltip');
                tooltip.textContent = notes;
                card.appendChild(tooltip);
            }
        });

        card.addEventListener('mouseout', (event) => {
            const tooltip = event.currentTarget.querySelector('.tooltip');
            if (tooltip) {
                tooltip.remove();
            }
        });
    });
});
    </script>
   <div class="container">
    <div class="columns is-variable is-desktop">
        <div class="column">
            <label class="label" for="start-date">Start Date:</label>
            <input class="input" type="text" id="start-date" placeholder="Select start date">
        </div>
        <div class="column">
            <label class="label" for="end-date">End Date:</label>
            <input class="input" type="text" id="end-date" placeholder="Select end date">
        </div>
    </div>
</div>
    <div class="container">
        <div class="uk-grid uk-child-width-1-5" uk-grid id="snapshot-container">            
        </div>
    </div>
    
   
    <script>
        // Calculate the default start date (1 week ago)
        var startDate = new Date();
        startDate.setDate(startDate.getDate() - 7);
    
        // Set the default end date to the current date
        var endDate = new Date();
    
        // Initialize Flatpickr on start-date input field with default values
        flatpickr("#start-date", {
            dateFormat: "Y-m-d",
            defaultDate: startDate,
            onChange: function(selectedDates, dateStr) {
                updateSnapshotCards();
            }
        });
    
        // Initialize Flatpickr on end-date input field with default values
        flatpickr("#end-date", {
            dateFormat: "Y-m-d",
            defaultDate: endDate,
            onChange: function(selectedDates, dateStr) {
                updateSnapshotCards();
            }
        });
    
        // Function to update the snapshot cards based on the selected date range
        function updateSnapshotCards() {
            // Get the selected start and end dates
            var startDateStr = document.getElementById("start-date").value;
            var endDateStr = document.getElementById("end-date").value;
            var startDate = new Date(startDateStr);
            var endDate = new Date(endDateStr);
            endDate.setHours(23, 59, 59, 999);
            // Clear existing snapshot cards
            document.getElementById("snapshot-container").innerHTML = '';
    
            // Iterate through snapshots and render cards for snapshots within the selected date range
            snapshots.reverse().forEach((snapshot) => {
                var snapshotDate = new Date(snapshot.timestamp);
                if (snapshotDate >= startDate && snapshotDate <= endDate) {
                    // Create a new snapshot card element
                    var cardDiv = document.createElement('div');
                    cardDiv.classList.add('uk-card', 'uk-card-body', 'uk-card-default', 'date-card');
                    cardDiv.setAttribute('data-notes', snapshot.notes);
    
                    // Create a link for the snapshot
                    var link = document.createElement('a');
                    link.setAttribute('href', '/singlesnapshot/' + snapshot.snapshot_ID);
                    link.classList.add('uk-link-toggle');
    
                    // Create paragraph elements for date and time
                    var datePara = document.createElement('p');
                    datePara.textContent = new Date(snapshot.timestamp).toLocaleDateString('en-GB');
    
                    var timePara = document.createElement('p');
                    timePara.textContent = new Date(snapshot.timestamp).toLocaleTimeString('en-GB');
    
                    // Append date and time paragraphs to the link
                    link.appendChild(datePara);
                    link.appendChild(timePara);
    
                    // Append link to the card
                    cardDiv.appendChild(link);
    
                    // Create a hidden paragraph to store the notes
                    var notesPara = document.createElement('p');
                    notesPara.classList.add('notes');
                    notesPara.style.display = 'none';
                    notesPara.textContent = snapshot.notes;
    
                    // Append hidden notes paragraph to the card
                    cardDiv.appendChild(notesPara);
    
                    // Append the card to the snapshot container
                    document.getElementById('snapshot-container').appendChild(cardDiv);
                }
            });
        }
    
        // Initial update of snapshot cards based on default date range
        updateSnapshotCards();
    </script>
    
    <script>
        window.addEventListener("load", function() {
            updateSnapshotCards();
        });
    </script>
    <script>
        

            let snapshots;
console.log("ejs script 165");

snapshots = <%- JSON.stringify(snapshots) %>;
console.log(snapshots[0]);

const dates = snapshots.map(snapshot => snapshot.timestamp);

const levelData = snapshots.map(snapshot => {
    const level = {};
    Object.keys(snapshot).forEach(key => {
        if (key !== 'snapshot_ID' && key !== 'timestamp' && key !== 'notes' && key !== 'user_id') {
            level[key] = snapshot[key];
        }
    });
    return level;
});
console.log("printing leveldata:")
console.log(levelData);
const levels = Object.keys(levelData[0]).map(level => levelData.map(item => item[level]));
            
       // });

console.log("Dates:", dates);
         console.log("Levels:", levels);
         let levelNames = Object.keys(snapshots[0]).filter(key => key !== 'snapshot_ID' && key !== 'timestamp' && key !== 'notes' && key !== 'user_id');
         levelNames = levelNames.map(name => name.replace('_level', ''));
        console.log(`Level names from the start of the code ${levelNames}`);

        




            const emotionColorMap = {
                    "enjoyment": "#E69F00",   // Orange
                    "surprise": "#56B4E9",    // Sky Blue
                    "contempt": "#009E73",    // Bluish Green
                    "fear": "#ffd700",        // Yellow
                    "sadness": "#0072B2",     // Blue
                    "disgust": "#D55E00",     // Vermillion
                    "anger": "#CC79A7"        // Reddish Purple
                };

        //let myChart; // Declare myChart variable in the global scope
    
        // Extracting dates and levels from EJS variables
      
        const emotionLabels = ["enjoyment", "surprise", "contempt", "sadness", "fear", "disgust", "anger"];
        let timeRange = 'week'; // Default time range
        let selectedSeries = null;
        let xAxisUnit='day';
        let currentDate = moment();
        
        console.log(`emotion labels are: ${emotionLabels}`);
    
        // Create initial chart with one week worth of data
        let defaultStartDate = moment().subtract(1, 'week');
        let filteredDates = dates.filter(date => moment(date).isSameOrAfter(defaultStartDate));
        let filteredLevels = filteredDates.map((date, index) => levels.map(level => level[index]));
    
        // Function to create chart
        function createChart(dates, levels, selectedSeries, xAxisUnit) {
            //console.log("at the createChart destroy call");
        
            
    //destroyChart(myChart);
    

            console.log("Making a chart");
            console.log(`levels on chart creation ${levels}`);
            console.log(`inside create chart, selected series is: ${selectedSeries}`);
    const datasets = levels.map((level, index) => {
        //const datasetLabel = levelNames[index]; // Use levelNames instead of emotionLabels
        console.log(`datasetLabel is :${levelNames[index]}`);

        if (selectedSeries && levelNames[index] !== selectedSeries) {
            console.log("in the top if statement")
            return  {
                label: levelNames[index],
                data: [],
                fill: false,
                borderColor: 'rgba(0, 0, 0, 0)',
                tension: 0.1,
                pointRadius: 0
            };;
        } else  {
            console.log("in the bottom if statement");
            return {
                label: levelNames[index],
                data: level,
                fill: false,
                borderColor: emotionColorMap[levelNames[index]],
                tension: 0.1,
                pointRadius: 0
            };
        }
    });

    console.log("Datasets:", datasets.data);

    const chartData = {
        labels: dates,
        datasets: datasets
    };

    console.log(`Just before chart config the chart data datasets are:`, chartData.datasets);
    const chartConfig = {
        type: "line",
        data: chartData,
        options: {
            responsive: true,
            animation: true,
            maintainAspectRatio: true,
            scales: {
                y: {
                    min: 0,
                    max: 10,
                    ticks: {
                    color: '#2c2c2c' // Set font color for y-axis labels
                },
                grid: {
                    color: 'rgba(44, 44, 44, 0.1)' // Set color for x-axis gridlines
                }
                },
                x: {
                    type: 'time',
                    time: {
                        unit: xAxisUnit,
                        displayFormats: {
                            'day': 'DD/MM/YYYY'
                        }
                    },
                    ticks: {
                    color: '#2c2c2c' // Set font color for y-axis labels
                },
                grid: {
                    color: 'rgba(44, 44, 44, 0.1)' // Set color for x-axis gridlines
                }
                }
            },
            plugins: {
                legend: { display: true, position: 'right', labels: {
                    boxWidth: 20, // Set the width of the legend box
                    boxHeight: 0, // Set the height of the legend box
                    fontColor: 'black', // Set the color of the text inside the legend
                    align: 'start' }},
                tooltips: { enabled: true },
                title: {
                    display: true,
                    text: <% if (session.first_name) { %>
                            "<%= session.first_name %>'s Emotional Journey"
                        <% } else { %>
                            "Your Emotional Journey"
                        <% } %>,
                    font: { size: 20 },
                },
                backgroundColor: 'rgba(0, 0, 0, 0.5)'
            },
            onResize: function(chart, size) {
                if (size.width !== chart.width || size.height !== chart.height) {
                    chart.resize();
                }
            }
        },
    };

console.log(`Just before chart creation the chart data is:`, chartConfig.data.datasets);

const newChart = new Chart("myChart", chartConfig);

//Sort legend labels after creating the chart - may be broken at the moment.
newChart.legend.legendItems.sort((a, b) => {
    const datasetA = newChart.data.datasets[a.datasetIndex];
    const datasetB = newChart.data.datasets[b.datasetIndex];

    // Get the last data points from datasets A and B
    const lastDataPointA = datasetA.data[datasetA.data.length - 1];
    const lastDataPointB = datasetB.data[datasetB.data.length - 1];

    // Compare the last data points
    return lastDataPointB - lastDataPointA;
});

console.log("About to return new chart");
return newChart;
}

function downsampleAndComputeRollingAverages(data, targetPoints, windowSize) {
    const downsampledData = downsample(data, targetPoints);
    const rollingAverages = computeRollingAverages(downsampledData, windowSize);
    return rollingAverages;
}

function downsample(data, targetPoints) {
    const dataSize = data.length;
    const step = Math.ceil(dataSize / targetPoints);
    const downsampledData = [];
    for (let i = 0; i < dataSize; i += step) {
        const chunk = data.slice(i, i + step);
        const avg = chunk.reduce((acc, val) => acc + val, 0) / chunk.length;
        downsampledData.push(avg);
    }
    return downsampledData;
}

function downsampleDates(dates, targetPoints) {
    const dataSize = dates.length;
    const step = Math.ceil(dataSize / targetPoints);
    const downsampledDates = [];
    for (let i = 0; i < dataSize; i += step) {
        downsampledDates.push(dates[i]);
    }
    return downsampledDates;
}

function computeRollingAverages(data, windowSize) {
    const rollingAverages = [];
    for (let i = 0; i < data.length; i++) {
        let sum = 0;
        let count = 0;
        // Compute the sum of data points within the window
        for (let j = Math.max(0, i - windowSize + 1); j <= i; j++) {
            sum += data[j];
            count++;
        }
        // Compute the average and push it to the rollingAverages array
        rollingAverages.push(sum / count);
    }
    return rollingAverages;
}
    
function updateChart(timeRange, selectedSeries, xAxisUnit) {
    
    destroyChart(myChart);
    
    // Filter dates and levels based on the selected time range
    let filteredDates, filteredLevels, targetPoints, windowSize;
    console.log("at the beginning of update chart");
    console.log(selectedSeries);
    
    switch (timeRange) {
        case 'all':
            // Use all data
            filteredDates = dates;
            filteredLevels = levels;
            targetPoints = 50; // Specify the target number of data points after downsampling
            windowSize = Math.ceil(filteredDates.length / targetPoints); // Adjust the window size based on the target number of data points
            filteredLevels = levels.map(level => downsampleAndComputeRollingAverages(level, targetPoints, windowSize));
            // Downsample the dates array after computing rolling averages
            filteredDates = downsampleDates(filteredDates, targetPoints);
            break;
        case 'year':
            // Filter data for the last year
            const defaultStartDateYear = currentDate.clone().subtract(1, 'year');
            filteredDates = dates.filter(date => moment(date).isSameOrAfter(defaultStartDateYear));
            targetPoints = 50; // Specify the target number of data points after downsampling
            windowSize = Math.ceil(filteredDates.length / targetPoints); // Adjust the window size based on the target number of data points
            filteredLevels = levels.map(level => downsampleAndComputeRollingAverages(level, targetPoints, windowSize));
            // Downsample the dates array after computing rolling averages
            filteredDates = downsampleDates(filteredDates, targetPoints);


            break;
        case '3months':
            // Filter data for the last 3 months
            const defaultStartDate3Months = currentDate.clone().subtract(3, 'months');
            filteredDates = dates.filter(date => moment(date).isSameOrAfter(defaultStartDate3Months));
            targetPoints = 30; // Specify the target number of data points after downsampling
            windowSize = Math.ceil(filteredDates.length / targetPoints); // Adjust the window size based on the target number of data points
            filteredLevels = levels.map(level => downsampleAndComputeRollingAverages(level, targetPoints, windowSize));
            // Downsample the dates array after computing rolling averages
            filteredDates = downsampleDates(filteredDates, targetPoints);
            break;
        case 'month':
            // Filter data for the last month
            const defaultStartDateMonth = currentDate.clone().subtract(1, 'month');
            filteredDates = dates.filter(date => moment(date).isSameOrAfter(defaultStartDateMonth));           
            targetPoints = 30; // Specify the target number of data points after downsampling
            windowSize = Math.ceil(filteredDates.length / targetPoints); // Adjust the window size based on the target number of data points
            filteredLevels = levels.map(level => downsampleAndComputeRollingAverages(level, targetPoints, windowSize));
            // Downsample the dates array after computing rolling averages
            filteredDates = downsampleDates(filteredDates, targetPoints);
            break;
        case 'week':
            // Filter data for the last week
            const defaultStartDateWeek = currentDate.clone().subtract(1, 'week');
            filteredDates = dates.filter(date => moment(date).isSameOrAfter(defaultStartDateWeek));
            targetPoints = 14; // Specify the target number of data points after downsampling
            windowSize = Math.ceil(filteredDates.length / targetPoints); // Adjust the window size based on the target number of data points
            filteredLevels = levels.map(level => downsampleAndComputeRollingAverages(level, targetPoints, windowSize));
            // Downsample the dates array after computing rolling averages
            filteredDates = downsampleDates(filteredDates, targetPoints);
            break;
            case 'day':
            // Filter data for the last week
            const defaultStartDateDay = currentDate.clone().startOf('day');
            filteredDates = dates.filter(date => moment(date).isSameOrAfter(defaultStartDateDay));
            filteredLevels = levels.map(level => level.slice(-filteredDates.length));
            break;
        default:
            break;
    }

    // Update chart with filtered data
   
    console.log("just before new chart creation");
    myChart = createChart(filteredDates, filteredLevels, selectedSeries, xAxisUnit);
    console.log("near the bottom of update chart");
   

    // Update chart data
//     myChart.data.labels = filteredDates;
// myChart.data.datasets = filteredLevels.map((level, index) => {
//     //const datasetLabel = Object.keys(levelData[index])[0].replace('_level', '');
//     return {
//         label: levelNames[index],
//         data: level,
//         fill: false,
//         borderColor: emotionColorMap[levelNames[index]],
//         tension: 0.1
//     };
//});
    //myChart.update();

    // Sort legend items based on the values of the last data points on the graph
    return myChart;
}

function destroyChart(chartInstance) {
    // console.log("inside destroy method")
    // if (chartInstance instanceof Chart) {
    //     console.log("chart deteceted and inside destroy part of if statement");
    //     chartInstance.destroy();
    //     console.log("Chart destroyed successfully.");
    // } else {
    //     console.log("No chart instance found.");
    //}
    const existingChart = Chart.getChart(chartInstance);

// Destroy the existing chart if it exists
if (existingChart) {
    existingChart.destroy();
}
    
}



// Usage example
const defaultStartDateYear = currentDate.clone().subtract(1, 'year');
filteredDates = dates.filter(date => moment(date).isSameOrAfter(defaultStartDateYear));

const targetPoints = 20; // Specify the target number of data points after downsampling
const windowSize = Math.ceil(filteredDates.length / targetPoints); // Adjust the window size based on the target number of data points

filteredLevels = levels.map(level => downsampleAndComputeRollingAverages(level, targetPoints, windowSize));




         // Add event listeners to each button
    document.getElementById("allButton").addEventListener("click", function() {
        updateChart("all", selectedSeries, xAxisUnit);
    });

    document.getElementById("yearButton").addEventListener("click", function() {
        timeRange = "year"
         xAxisUnit = 'day'
        updateChart(timeRange, selectedSeries, xAxisUnit);
    });

    document.getElementById("threeMonthsButton").addEventListener("click", function() {
        timeRange = "3months"
        xAxisUnit = 'day'
        updateChart(timeRange, selectedSeries, xAxisUnit);
    });

    document.getElementById("monthButton").addEventListener("click", function() {
        timeRange = "month"
        xAxisUnit = 'day'
        updateChart(timeRange, selectedSeries, xAxisUnit);
    });

    document.getElementById("weekButton").addEventListener("click", function() {
        timeRange = "week"
        xAxisUnit = 'day'
        updateChart(timeRange, selectedSeries, xAxisUnit);
    });
    document.getElementById("dayButton").addEventListener("click", function() {
        timeRange = "day"
        xAxisUnit = 'hour'
        updateChart(timeRange, selectedSeries,xAxisUnit);
    });

    document.getElementById("showAllButton").addEventListener("click", function() {
        selectedSeries = null;
        updateChart(timeRange, selectedSeries, xAxisUnit); 
    });

    document.getElementById("showFearButton").addEventListener("click", function() {
    selectedSeries = "fear";
    updateChart(timeRange, selectedSeries,xAxisUnit);
});

document.getElementById("showAngerButton").addEventListener("click", function() {
    selectedSeries = "anger";
    updateChart(timeRange, selectedSeries,xAxisUnit);
});

document.getElementById("showDisgustButton").addEventListener("click", function() {
    selectedSeries = "disgust";
    updateChart(timeRange, selectedSeries, xAxisUnit);
});

document.getElementById("showSadnessButton").addEventListener("click", function() {
    selectedSeries = "sadness";
    updateChart(timeRange, selectedSeries, xAxisUnit);
});

document.getElementById("showContemptButton").addEventListener("click", function() {
    selectedSeries = "contempt";
    updateChart(timeRange, selectedSeries, xAxisUnit);
});

document.getElementById("showSurpriseButton").addEventListener("click", function() {
    selectedSeries = "surprise";
    updateChart(timeRange, selectedSeries, xAxisUnit);
});

document.getElementById("showEnjoymentButton").addEventListener("click", function() {
    selectedSeries = "enjoyment";
    updateChart(timeRange, selectedSeries, xAxisUnit);
});
    
        


window.onload = function () {
            //myChart = createChart(filteredDates, filteredLevels, selectedSeries); // Initialize chart
            //updateChart(timeRange, selectedSeries, xAxisUnit); // Set default time range
            
              // Initialize chart and set default time range
    myChart = createChart(filteredDates, filteredLevels, selectedSeries, xAxisUnit);
    updateChart(timeRange, selectedSeries, xAxisUnit);

        };
        


    </script>
    
</body>
</html>
